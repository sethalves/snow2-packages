#! /bin/sh
#| -*- scheme -*-
exec csi -s $0 "$@"
|#

(use amazon-s3)
(use http-client)


(define (program-and-command-line)
  ;; argv holds the script name, but if this is run as an interpreter,
  ;; it starts with /usr/local/bin/csi -script ...
  ;; (command-line-arguments) doesn't include the script name.

  ;; search through (argv) until we find (command-line-arguments),
  ;; and assume that the string in (argv) before the start of
  ;; (command-line-arguments) must be the program name.
  (let loop ((cl (argv))
             (program-name (car (argv))))
    (cond ((null? cl)
           (cons program-name (command-line-arguments)))
          ((equal? cl (command-line-arguments))
           (cons program-name (command-line-arguments)))
          (else
           (loop (cdr cl) (car cl))))))


(define (main-program repo-and-filenames)

  ;; XXX make a better parser
  (let* ((creds-hndl (open-input-file "credentials/snow2"))
         (creds-line0 (read-line creds-hndl))
         (creds-line1 (read-line creds-hndl)))
    (close-input-port creds-hndl)
    ;; set amazon-s3 egg's parameters
    (access-key (substring creds-line0 15 (string-length creds-line0)))
    (secret-key (substring creds-line1 13 (string-length creds-line1)))
    (https #f)
    ;; (amazon-ns ...)
    )

  ;; (log-http-to-stderr #t)

  (let ((repo-name (car repo-and-filenames))
        (filenames (cdr repo-and-filenames)))
    (for-each
     (lambda (filename)
       (put-file!
        (cond ((equal? repo-name "snow") "snow-repository")
              ((equal? repo-name "seth") "snow2")
              (else (error "unknown repository")))
        filename filename acl: 'public-read))
     filenames)))

(main-program
 (cdr (program-and-command-line)))
